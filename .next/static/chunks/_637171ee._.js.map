{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/constants/index.ts"],"sourcesContent":["// import React from \"react\";\n// import { CreateAssistantDTO } from \"@vapi-ai/web/dist/api\";\n// import { z } from \"zod\";\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\n// export const interviewer: CreateAssistantDTO = {\n//   name: \"Interviewer\",\n//   firstMessage:\n//     \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n//   transcriber: {\n//     provider: \"deepgram\",\n//     model: \"nova-2\",\n//     language: \"en\",\n//   },\n//   voice: {\n//     provider: \"11labs\",\n//     voiceId: \"sarah\",\n//     stability: 0.4,\n//     similarityBoost: 0.8,\n//     speed: 0.9,\n//     style: 0.5,\n//     useSpeakerBoost: true,\n//   },\n//   model: {\n//     provider: \"openai\",\n//     model: \"gpt-4\",\n//     messages: [\n//       {\n//         role: \"system\",\n//         content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\n\n// Interview Guidelines:\n// Follow the structured question flow:\n// {{questions}}\n\n// Engage naturally & react appropriately:\n// Listen actively to responses and acknowledge them before moving forward.\n// Ask brief follow-up questions if a response is vague or requires more detail.\n// Keep the conversation flowing smoothly while maintaining control.\n// Be professional, yet warm and welcoming:\n\n// Use official yet friendly language.\n// Keep responses concise and to the point (like in a real voice interview).\n// Avoid robotic phrasing—sound natural and conversational.\n// Answer the candidate’s questions professionally:\n\n// If asked about the role, company, or expectations, provide a clear and relevant answer.\n// If unsure, redirect the candidate to HR for more details.\n\n// Conclude the interview properly:\n// Thank the candidate for their time.\n// Inform them that the company will reach out soon with feedback.\n// End the conversation on a polite and positive note.\n\n\n// - Be sure to be professional and polite.\n// - Keep all your responses short and simple. Use official language, but be kind and welcoming.\n// - This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,\n//       },\n//     ],\n//   },\n// };\n\n// export const feedbackSchema = z.object({\n//   totalScore: z.number(),\n//   categoryScores: z.tuple([\n//     z.object({\n//       name: z.literal(\"Communication Skills\"),\n//       score: z.number(),\n//       comment: z.string(),\n//     }),\n//     z.object({\n//       name: z.literal(\"Technical Knowledge\"),\n//       score: z.number(),\n//       comment: z.string(),\n//     }),\n//     z.object({\n//       name: z.literal(\"Problem Solving\"),\n//       score: z.number(),\n//       comment: z.string(),\n//     }),\n//     z.object({\n//       name: z.literal(\"Cultural Fit\"),\n//       score: z.number(),\n//       comment: z.string(),\n//     }),\n//     z.object({\n//       name: z.literal(\"Confidence and Clarity\"),\n//       score: z.number(),\n//       comment: z.string(),\n//     }),\n//   ]),\n//   strengths: z.array(z.string()),\n//   areasForImprovement: z.array(z.string()),\n//   finalAssessment: z.string(),\n// });\n\nexport const interviewCovers = [\n    \"/covers/adobe.png\",\n    \"/covers/amazon.png\",\n    \"/covers/facebook.png\",\n    \"/covers/hostinger.png\",\n    \"/covers/pinterest.png\",\n    \"/covers/quora.png\",\n    \"/covers/reddit.png\",\n    \"/covers/skype.png\",\n    \"/covers/spotify.png\",\n    \"/covers/telegram.png\",\n    \"/covers/tiktok.png\",\n    \"/covers/yahoo.png\"\n  ];\n\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,8DAA8D;AAC9D,2BAA2B;;;;;;AAEpB,MAAM,WAAW;IACtB,YAAY;IACZ,SAAS;IACT,OAAO;IACP,WAAW;IACX,QAAQ;IACR,MAAM;IACN,UAAU;IACV,OAAO;IACP,KAAK;IACL,cAAc;IACd,WAAW;IACX,SAAS;IACT,WAAW;IACX,QAAQ;IACR,MAAM;IACN,SAAS;IACT,OAAO;IACP,UAAU;IACV,OAAO;IACP,YAAY;IACZ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,KAAK;IACL,OAAO;IACP,KAAK;IACL,cAAc;IACd,QAAQ;IACR,WAAW;IACX,mBAAmB;IACnB,OAAO;IACP,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,aAAa;IACb,UAAU;IACV,WAAW;IACX,QAAQ;IACR,YAAY;IACZ,IAAI;IACJ,YAAY;IACZ,IAAI;IACJ,cAAc;IACd,WAAW;IACX,SAAS;IACT,YAAY;IACZ,SAAS;IACT,OAAO;IACP,eAAe;IACf,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,OAAO;IACP,aAAa;IACb,UAAU;IACV,QAAQ;IACR,aAAa;IACb,UAAU;IACV,KAAK;IACL,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,OAAO;IACP,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,UAAU;IACV,SAAS;IACT,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,WAAW;IACX,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,SAAS;IACT,QAAQ;IACR,eAAe;AACjB;AA8FO,MAAM,kBAAkB;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEI,MAAM,kBAA+B;IAC1C;QACE,IAAI;QACJ,QAAQ;QACR,MAAM;QACN,MAAM;QACN,WAAW;YAAC;YAAS;YAAc;YAAW;SAAe;QAC7D,OAAO;QACP,WAAW;YAAC;SAAiB;QAC7B,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,QAAQ;QACR,MAAM;QACN,MAAM;QACN,WAAW;YAAC;YAAW;YAAW;YAAW;SAAQ;QACrD,OAAO;QACP,WAAW;YAAC;SAAmB;QAC/B,WAAW;QACX,WAAW;IACb;CACD","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/public/utils.ts"],"sourcesContent":["import { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n    logoURLs.map(async ({ tech, url }) => ({\n      tech,\n      url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n    }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEA,MAAM,kBAAkB;AAExB,MAAM,oBAAoB,CAAC;IACzB,MAAM,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ;IACpE,OAAO,qHAAA,CAAA,WAAQ,CAAC,IAA6B;AAC/C;AAEA,MAAM,kBAAkB,OAAO;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;QAAO;QACnD,OAAO,SAAS,EAAE,EAAE,kCAAkC;IACxD,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,UAAU,GAAG,CAAC,CAAC;QAC9B,MAAM,aAAa,kBAAkB;QACrC,OAAO;YACL;YACA,KAAK,GAAG,gBAAgB,CAAC,EAAE,WAAW,CAAC,EAAE,WAAW,aAAa,CAAC;QACpE;IACF;IAEA,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC/B,SAAS,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;YACrC;YACA,KAAK,AAAC,MAAM,gBAAgB,OAAQ,MAAM;QAC5C,CAAC;IAGH,OAAO;AACT;AAEO,MAAM,0BAA0B;IACrC,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,qHAAA,CAAA,kBAAe,CAAC,MAAM;IACrE,OAAO,CAAC,OAAO,EAAE,qHAAA,CAAA,kBAAe,CAAC,YAAY,EAAE;AACjD","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/app/components/InterviewCard.tsx"],"sourcesContent":["\"use client\"\r\nimport React from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport Image from \"next/image\";\r\nimport { getRandomInterviewCover } from \"@/public/utils\";\r\nimport { interviewCovers } from '@/constants';\r\n\r\nconst InterviewCard = ({ interviewId, userId, role, type,techStack, createdAt\r\n\r\n  }:InterviewCardProps) =>{\r\n    const feedback = null as Feedback | null;\r\n   const normalizedType = /mix/gi.test(type)? 'Mixed' : type;\r\n   const formattedDate  = dayjs(feedback?.createdAt || createdAt || Date.now()).format('MMM D, YYYY');\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"card-border w-[360px] max-sm:w-full min-h-96\">\r\n\r\n            <div className=\"card-interview\">\r\n\r\n                <div>\r\n                    <div className=\"absolute top-0 right-0 w-fit px-4 py-2 rounded-bl-lg bg-light-600\">\r\n                        <p className=\"badge-text\">\r\n                            {normalizedType}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <Image src={getRandomInterviewCover()} alt=\"cover image\"\r\n                     width={90} height={90} className=\"rounded-full object-fit size-[90px] \" />\r\n                </div>\r\n\r\n            </div>\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InterviewCard"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAOA,MAAM,gBAAgB,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC,SAAS,EAAE,SAAS,EAEvD;IAClB,MAAM,WAAW;IAClB,MAAM,iBAAiB,QAAQ,IAAI,CAAC,QAAO,UAAU;IACrD,MAAM,gBAAiB,CAAA,GAAA,wIAAA,CAAA,UAAK,AAAD,EAAE,UAAU,aAAa,aAAa,KAAK,GAAG,IAAI,MAAM,CAAC;IAGnF,qBAEI,6LAAC;QAAI,WAAU;kBAEX,cAAA,6LAAC;YAAI,WAAU;sBAEX,cAAA,6LAAC;;kCACG,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BAAE,WAAU;sCACR;;;;;;;;;;;kCAIT,6LAAC,gIAAA,CAAA,UAAK;wBAAC,KAAK,CAAA,GAAA,kHAAA,CAAA,0BAAuB,AAAD;wBAAK,KAAI;wBAC1C,OAAO;wBAAI,QAAQ;wBAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;AAOtD;KA7BM;uCA+BS","debugId":null}}]
}