{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/firebase/admin.ts"],"sourcesContent":["// lib/firebase/admin.ts\r\nimport { initializeApp, getApps, cert } from \"firebase-admin/app\";\r\nimport { getAuth } from \"firebase-admin/auth\";\r\nimport { getFirestore } from \"firebase-admin/firestore\";\r\n\r\n// Initialize Firebase Admin SDK\r\nfunction initFirebaseAdmin() {\r\n  const apps = getApps();\r\n\r\n  if (!apps.length) {\r\n    initializeApp({\r\n      credential: cert({\r\n        \r\n      projectId: process.env.FIREBASE_PROJECT_ID,\r\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n')\r\n      }),\r\n    });\r\n  }\r\n\r\n  return {\r\n    auth: getAuth(),\r\n    db: getFirestore(),\r\n  };\r\n}\r\n\r\nexport const { auth, db } = initFirebaseAdmin();\r\n\r\n\r\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AACxB;AACA;AACA;;;;;;;;;;AAEA,gCAAgC;AAChC,SAAS;IACP,MAAM,OAAO,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD;IAEnB,IAAI,CAAC,KAAK,MAAM,EAAE;QAChB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD,EAAE;YACZ,YAAY,CAAA,GAAA,gJAAA,CAAA,OAAI,AAAD,EAAE;gBAEjB,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YAC9D;QACF;IACF;IAEA,OAAO;QACL,MAAM,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAD;QACZ,IAAI,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IACjB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/lib/actions/auth.action.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { db, auth } from \"@/firebase/admin\"; // Adjusted the path to match the correct location\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst ONE_WEEK = 60 * 60 * 24 * 7; // One week in milliseconds\r\n\r\nexport async function signUp(params: SignUpParams){\r\n    const {uid, name, email} = params;\r\n\r\n    try{\r\n         const userRecord = await db.collection('users').doc(uid).get()\r\n   \r\n         if (userRecord.exists) {\r\n             \r\n            return {\r\n                success: false,\r\n                message: 'User alreasdy exists.Please sign in instead.'\r\n            }\r\n         }\r\n\r\n         await db.collection('users').doc(uid).set({\r\n\r\n            name,\r\n            email\r\n         })\r\n          \r\n         return {\r\n            success: true,\r\n            message: \"Account created successfully. Please sign in.\"\r\n\r\n         }\r\n\r\n   \r\n        }  catch (e:any) {\r\n        \r\n        console.error(\"Error creating a user\", e);\r\n\r\n        if(e.code === 'auth/email-already-in-use'){\r\n\r\n            return{\r\n                success: false,\r\n                message: \"Email already in use.\"\r\n            }\r\n        }\r\n\r\n        return{\r\n            success: false,\r\n            message: \"Lodhe dusri id daal na \",\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport async function signIn(params: SignInParams){\r\n    const {email, idToken} = params;\r\n\r\n    try{\r\n           \r\n        const userRecord = await auth.getUserByEmail(email);\r\n        \r\n        if (!userRecord) {\r\n            return {\r\n                success: false,\r\n                message: \"User does not exist. Please sign up.\"\r\n            };\r\n        }\r\n\r\n        await setSessionCookie(idToken);\r\n\r\n    } catch(e){\r\n        console.error(\"Sign in failed:\", e);\r\n\r\n    }\r\n\r\n    return{\r\n        success: false,\r\n        message: \"Failed to log in an account.\"\r\n    }\r\n}\r\n\r\nexport async function setSessionCookie(idToken: string){\r\n    const cookieStore = await cookies();\r\n    const sessionCookie = await auth.createSessionCookie(idToken, { expiresIn: ONE_WEEK * 1000, })\r\n    \r\n    cookieStore.set('session', sessionCookie, {\r\n        maxAge: ONE_WEEK ,\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === 'production',\r\n        path: '/',\r\n        sameSite: 'lax',\r\n    })\r\n\r\n} \r\n\r\nexport async function getCurrentUser(): Promise<User | null> {\r\n    const cookieStore = await cookies();\r\n  \r\n    const sessionCookie = cookieStore.get(\"session\")?.value;\r\n    if (!sessionCookie) return null;\r\n  \r\n    try {\r\n      const decodedClaims = await auth.verifySessionCookie(sessionCookie, true);\r\n  \r\n      // get user info from db\r\n      const userRecord = await db\r\n        .collection(\"users\")\r\n        .doc(decodedClaims.uid)\r\n        .get();\r\n      if (!userRecord.exists) return null;\r\n  \r\n      return {\r\n        ...userRecord.data(),\r\n        id: userRecord.id,\r\n      } as User;\r\n    } catch (error) {\r\n      console.log(error);\r\n  \r\n      // Invalid or expired session\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Check if user is authenticated\r\nexport async function isAuthenticated() {\r\n    const user = await getCurrentUser();\r\n    return !!user; \r\n  }\r\n\r\n// \"use server\";\r\n\r\n// import { auth, db } from \"@/firebase/admin\";\r\n// import { cookies } from \"next/headers\";\r\n\r\n// // Session duration (1 week)\r\n// const SESSION_DURATION = 60 * 60 * 24 * 7;\r\n\r\n// // Set session cookie\r\n// export async function setSessionCookie(idToken: string) {\r\n//   const cookieStore = await cookies();\r\n\r\n//   // Create session cookie\r\n//   const sessionCookie = await auth.createSessionCookie(idToken, {\r\n//     expiresIn: SESSION_DURATION * 1000, // milliseconds\r\n//   });\r\n\r\n//   // Set cookie in the browser\r\n//   cookieStore.set(\"session\", sessionCookie, {\r\n//     maxAge: SESSION_DURATION,\r\n//     httpOnly: true,\r\n//     secure: process.env.NODE_ENV === \"production\",\r\n//     path: \"/\",\r\n//     sameSite: \"lax\",\r\n//   });\r\n// }\r\n\r\n// export async function signUp(params: SignUpParams) {\r\n//   const { uid, name, email } = params;\r\n\r\n//   try {\r\n//     // check if user exists in db\r\n//     const userRecord = await db.collection(\"users\").doc(uid).get();\r\n//     if (userRecord.exists)\r\n//       return {\r\n//         success: false,\r\n//         message: \"User already exists. Please sign in.\",\r\n//       };\r\n\r\n//     // save user to db\r\n//     await db.collection(\"users\").doc(uid).set({\r\n//       name,\r\n//       email,\r\n//       // profileURL,\r\n//       // resumeURL,\r\n//     });\r\n\r\n//     return {\r\n//       success: true,\r\n//       message: \"Account created successfully. Please sign in.\",\r\n//     };\r\n//   } catch (error: any) {\r\n//     console.error(\"Error creating user:\", error);\r\n\r\n//     // Handle Firebase specific errors\r\n//     if (error.code === \"auth/email-already-exists\") {\r\n//       return {\r\n//         success: false,\r\n//         message: \"This email is already in use\",\r\n//       };\r\n//     }\r\n\r\n//     return {\r\n//       success: false,\r\n//       message: \"Failed to create account. Please try again.\",\r\n//     };\r\n//   }\r\n// }\r\n\r\n// export async function signIn(params: SignInParams) {\r\n//   const { email, idToken } = params;\r\n\r\n//   try {\r\n//     const userRecord = await auth.getUserByEmail(email);\r\n//     if (!userRecord)\r\n//       return {\r\n//         success: false,\r\n//         message: \"User does not exist. Create an account.\",\r\n//       };\r\n\r\n//     await setSessionCookie(idToken);\r\n//   } catch (error: any) {\r\n//     console.log(\"\");\r\n\r\n//     return {\r\n//       success: false,\r\n//       message: \"Failed to log into account. Please try again.\",\r\n//     };\r\n//   }\r\n// }\r\n\r\n// // Sign out user by clearing the session cookie\r\n// export async function signOut() {\r\n//   const cookieStore = await cookies();\r\n\r\n//   cookieStore.delete(\"session\");\r\n// }\r\n\r\n// // Get current user from session cookie\r\n// export async function getCurrentUser(): Promise<User | null> {\r\n//   const cookieStore = await cookies();\r\n\r\n//   const sessionCookie = cookieStore.get(\"session\")?.value;\r\n//   if (!sessionCookie) return null;\r\n\r\n//   try {\r\n//     const decodedClaims = await auth.verifySessionCookie(sessionCookie, true);\r\n// /**\r\n//  * Sets a session cookie for the authenticated user.\r\n//  *\r\n//  * @param idToken - The Firebase ID token of the authenticated user.\r\n//  *\r\n//  * @remarks\r\n//  * This function creates a session cookie using the Firebase Admin SDK's `createSessionCookie` method.\r\n//  * The session cookie is then set in the browser's cookie store with appropriate security settings.\r\n//  *\r\n//  * @returns {Promise<void>} - A promise that resolves when the session cookie is set.\r\n//  */\r\n// export async function setSessionCookie(idToken: string) {\r\n//   const cookieStore = await cookies();\r\n\r\n//   // Create session cookie\r\n//   const sessionCookie = await auth.createSessionCookie(idToken, {\r\n//     expiresIn: SESSION_DURATION * 1000, // milliseconds\r\n//   });\r\n\r\n//   // Set cookie in the browser\r\n//   cookieStore.set(\"session\", sessionCookie, {\r\n//     maxAge: SESSION_DURATION,\r\n//     httpOnly: true,\r\n//     secure: process.env.NODE_ENV === \"production\",\r\n//     path: \"/\",\r\n//     sameSite: \"lax\",\r\n//   });\r\n// }\r\n\r\n//     // get user info from db\r\n//     const userRecord = await db\r\n//       .collection(\"users\")\r\n//       .doc(decodedClaims.uid)\r\n//       .get();\r\n//     if (!userRecord.exists) return null;\r\n\r\n//     return {\r\n//       ...userRecord.data(),\r\n//       id: userRecord.id,\r\n//     } as User;\r\n//   } catch (error) {\r\n//     console.log(error);\r\n\r\n//     // Invalid or expired session\r\n//     return null;\r\n//   }\r\n// }\r\n\r\n// // Check if user is authenticated\r\n// export async function isAuthenticated() {\r\n//   const user = await getCurrentUser();\r\n//   return !!user;\r\n// }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file://D%3A/A.minorproject/jsm_mock_interview_platform/mock_interview_platform/app/%28auth%29/layout.tsx"],"sourcesContent":["import React from 'react';\r\nimport {ReactNode} from 'react';\r\nimport { redirect } from \"next/navigation\";\r\n\r\nimport { isAuthenticated } from \"@/lib/actions/auth.action\";\r\n\r\nconst AuthLayout = async ({children}: {children: ReactNode}) =>  {\r\n \r\n    const isUserAuthenticated = await isAuthenticated();\r\n      if (isUserAuthenticated) redirect('/');\r\n\r\n    return (\r\n    <div className=\"auth-layout\">{children}</div>\r\n    )\r\n}\r\nexport default AuthLayout;"],"names":[],"mappings":";;;;AAEA;AAAA;AAEA;;;;;;;;AAEA,MAAM,aAAa,OAAO,EAAC,QAAQ,EAAwB;IAEvD,MAAM,sBAAsB,MAAM,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD;IAC9C,IAAI,qBAAqB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAEpC,qBACA,8OAAC;QAAI,WAAU;kBAAe;;;;;;AAElC;uCACe","debugId":null}}]
}